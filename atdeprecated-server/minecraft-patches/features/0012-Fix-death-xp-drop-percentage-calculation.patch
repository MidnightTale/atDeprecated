From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MidnightTale <midnighttale24@gmail.com>
Date: Mon, 21 Jul 2025 17:43:24 +0700
Subject: [PATCH] Fix death xp drop percentage calculation


diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
index f8e0927db9fd500671b586589cb3ea72dfa226b2..be7bc0caafccdf3c9f6b140240b88e3696094349 100644
--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -1840,12 +1840,13 @@ public abstract class Player extends LivingEntity {
 
     @Override
     protected int getBaseExperienceReward(ServerLevel level) {
-        // atDeprecated start - Use deathXpDropPercentage gamerule for XP drop
+        // atDeprecated start - Use deathXpDropPercentage gamerule for XP drop (fixed XP calculation)
         if (!level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) && !this.isSpectator()) {
             int percent = level.getGameRules().getInt(GameRules.RULE_DEATH_XP_DROP_PERCENTAGE);
             if (percent < 0) percent = 0;
             if (percent > 100) percent = 100;
-            return (int) (this.totalExperience * (percent / 100.0));
+            int xp = getTrueTotalExperience();
+            return (int) (xp * (percent / 100.0));
         }
         return 0;
         // atDeprecated end
@@ -2396,4 +2397,34 @@ public abstract class Player extends LivingEntity {
         this.insomniaEnabled = enabled;
     }
     // atDeprecated end
+
+    // atDeprecated start - Correct XP calculation for death XP drop
+    public int getTrueTotalExperience() {
+        int exp = 0;
+        int level = this.experienceLevel;
+        exp += getExpAtLevel(level);
+        exp += Math.round(getExpToLevelUp(level) * this.experienceProgress);
+        return exp;
+    }
+
+    private int getExpAtLevel(int level) {
+        if (level <= 15) {
+            return level * level + 6 * level;
+        } else if (level <= 30) {
+            return 2 * level * level - 29 * level + 360;
+        } else {
+            return 5 * level * level - 151 * level + 2220;
+        }
+    }
+
+    private float getExpToLevelUp(int level) {
+        if (level <= 15) {
+            return 2 * level + 7;
+        } else if (level <= 30) {
+            return 5 * level - 38;
+        } else {
+            return 9 * level - 158;
+        }
+    }
+    // atDeprecated end
 }
