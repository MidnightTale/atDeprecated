From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MidnightTale <midnighttale24@gmail.com>
Date: Thu, 24 Jul 2025 09:31:51 +0700
Subject: [PATCH] Add config for death loot


diff --git a/net/minecraft/server/level/ServerPlayer.java b/net/minecraft/server/level/ServerPlayer.java
index 06e41bca6b964ca71ea7bca547b03cdb3610ba31..b39f2790fabeb7f2a977dcd1ec66db1fde373e51 100644
--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -1249,7 +1249,33 @@ public class ServerPlayer extends Player implements ca.spottedleaf.moonrise.patc
         if (!keepInventory) {
             for (ItemStack item : this.getInventory().getContents()) {
                 if (!item.isEmpty() && !EnchantmentHelper.has(item, net.minecraft.world.item.enchantment.EnchantmentEffectComponents.PREVENT_EQUIPMENT_DROP)) {
-                    loot.add(new DefaultDrop(item, stack -> this.drop(stack, true, false, false, null))); // Paper - Restore vanilla drops behavior; drop function taken from Inventory#dropAll (don't fire drop event)
+                    loot.add(new DefaultDrop(item, stack -> {
+                        ItemEntity entity = this.drop(stack, true, false, false, null);
+                        // atDeprecated start - death loot protection
+                        if (entity != null) {
+                            if (fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemsOwnerPickupOnly) {
+                                entity.setTarget(this.getUUID());
+                                entity.markAsDeathLoot();
+                            }
+                            if (fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemsGlow) {
+                                entity.setGlowingTag(true);
+                                entity.markAsDeathLoot();
+                            }
+                            if (fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemsInvulnerable) {
+                                entity.setInvulnerable(true);
+                                entity.markAsDeathLoot();
+                            }
+                            if (fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemDespawnTimeTicks > 0) {
+                                entity.age = -fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemDespawnTimeTicks;
+                                entity.markAsDeathLoot();
+                            }
+                            if (fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemsMobCantPickup) {
+                                entity.canMobPickup = false;
+                                entity.markAsDeathLoot();
+                            }
+                        }
+                        // atDeprecated end
+                    }));
                 }
             }
         }
diff --git a/net/minecraft/world/entity/LivingEntity.java b/net/minecraft/world/entity/LivingEntity.java
index d55a6989fd68f0bcf7bd05e9420fda1115afa6c0..25b1db4170104c7b49ed5c62989f6d8c59699465 100644
--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -3970,9 +3970,17 @@ public abstract class LivingEntity extends Entity implements Attackable, Waypoin
             }
 
             if (randomizeMotion) {
-                float f = this.random.nextFloat() * 0.5F;
-                float f1 = this.random.nextFloat() * (float) (Math.PI * 2);
-                itemEntity.setDeltaMovement(-Mth.sin(f1) * f, 0.2F, Mth.cos(f1) * f);
+                // atDeprecated start
+                if (this instanceof Player) {
+                    float f = this.random.nextFloat() * (float) fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathLootSpread;
+                    float f1 = this.random.nextFloat() * (float) (Math.PI * 2);
+                    itemEntity.setDeltaMovement(-Mth.sin(f1) * f, 0.2F, Mth.cos(f1) * f);
+                } else {
+                    float f = this.random.nextFloat() * 0.5F;
+                    float f1 = this.random.nextFloat() * (float) (Math.PI * 2);
+                    itemEntity.setDeltaMovement(-Mth.sin(f1) * f, 0.2F, Mth.cos(f1) * f);
+                }
+                // atDeprecated end
             } else {
                 float f = 0.3F;
                 float f1 = Mth.sin(this.getXRot() * (float) (Math.PI / 180.0));
diff --git a/net/minecraft/world/entity/item/ItemEntity.java b/net/minecraft/world/entity/item/ItemEntity.java
index b745eb5d9c68547335247910ff2ae8d5fb36349c..bef0bf94a54ab85a86efcb5502ca721f28cf33be 100644
--- a/net/minecraft/world/entity/item/ItemEntity.java
+++ b/net/minecraft/world/entity/item/ItemEntity.java
@@ -56,6 +56,7 @@ public class ItemEntity extends Entity implements TraceableEntity {
     public boolean canMobPickup = true; // Paper - Item#canEntityPickup
     private int despawnRate = -1; // Paper - Alternative item-despawn-rate
     public net.kyori.adventure.util.TriState frictionState = net.kyori.adventure.util.TriState.NOT_SET; // Paper - Friction API
+    public boolean isDeathLoot = false; // atDeprecated - mark as player death loot
 
     public ItemEntity(EntityType<? extends ItemEntity> entityType, Level level) {
         super(entityType, level);
@@ -233,6 +234,12 @@ public class ItemEntity extends Entity implements TraceableEntity {
                 // CraftBukkit end
                 this.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
             }
+            // atDeprecated start - glowing for death loot
+            if (this.isDeathLoot && fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemsGlow) {
+                this.setGlowingTag(true);
+            }
+            // atDeprecated end
+    
         }
     }
 
@@ -386,6 +393,9 @@ public class ItemEntity extends Entity implements TraceableEntity {
             output.putString("Paper.FrictionState", this.frictionState.toString());
         }
         // Paper end - Friction API
+        // atDeprecated start - persist isDeathLoot
+        output.putBoolean("atDeprecatedIsDeathLoot", this.isDeathLoot);
+        // atDeprecated end
     }
 
     @Override
@@ -405,6 +415,9 @@ public class ItemEntity extends Entity implements TraceableEntity {
             }
         });
         // Paper end - Friction API
+        // atDeprecated start - read isDeathLoot
+        this.isDeathLoot = input.getBooleanOr("atDeprecatedIsDeathLoot", false);
+        // atDeprecated end
         if (this.getItem().isEmpty()) {
             this.discard(null); // CraftBukkit - add Bukkit remove cause
         }
@@ -413,6 +426,13 @@ public class ItemEntity extends Entity implements TraceableEntity {
     @Override
     public void playerTouch(Player entity) {
         if (!this.level().isClientSide) {
+            // atDeprecated start - enforce owner-only pickup for death loot
+            if (this.isDeathLoot && fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemsOwnerPickupOnly) {
+                if (this.target != null && !this.target.equals(entity.getUUID())) {
+                    return;
+                }
+            }
+            // atDeprecated end
             ItemStack item = this.getItem();
             Item item1 = item.getItem();
             int count = item.getCount();
@@ -606,4 +626,8 @@ public class ItemEntity extends Entity implements TraceableEntity {
     public SlotAccess getSlot(int slot) {
         return slot == 0 ? SlotAccess.of(this::getItem, this::setItem) : super.getSlot(slot);
     }
+
+    // atDeprecated start - death loot util
+    public void markAsDeathLoot() { this.isDeathLoot = true; }
+    // atDeprecated end
 }
diff --git a/net/minecraft/world/entity/player/Player.java b/net/minecraft/world/entity/player/Player.java
index aa1a5de33aef5718581bf50ee45b1d2b1c13a46c..b9b14cd9f0ff5556e076aab21f4c2b85d1e48ee5 100644
--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -1840,7 +1840,16 @@ public abstract class Player extends LivingEntity {
 
     @Override
     protected int getBaseExperienceReward(ServerLevel level) {
-        return !level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) && !this.isSpectator() ? Math.min(this.experienceLevel * 7, 100) : 0;
+        // atDeprecated start - Use deathXpDropPercentage gamerule for XP drop (fixed XP calculation)
+        if (!level.getGameRules().getBoolean(GameRules.RULE_KEEPINVENTORY) && !this.isSpectator()) {
+            int percent = fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathXpDropPercentage;
+            if (percent < 0) percent = 0;
+            if (percent > 100) percent = 100;
+            int xp = getTrueTotalExperience();
+            return (int) (xp * (percent / 100.0));
+        }
+        return 0;
+        // atDeprecated end
     }
 
     @Override
@@ -2388,4 +2397,34 @@ public abstract class Player extends LivingEntity {
         this.insomniaEnabled = enabled;
     }
     // atDeprecated end
+
+    // atDeprecated start - Correct XP calculation for death XP drop
+    public int getTrueTotalExperience() {
+        int exp = 0;
+        int level = this.experienceLevel;
+        exp += getExpAtLevel(level);
+        exp += Math.round(getExpToLevelUp(level) * this.experienceProgress);
+        return exp;
+    }
+
+    private int getExpAtLevel(int level) {
+        if (level <= 15) {
+            return level * level + 6 * level;
+        } else if (level <= 30) {
+            return 2 * level * level - 29 * level + 360;
+        } else {
+            return 5 * level * level - 151 * level + 2220;
+        }
+    }
+
+    private float getExpToLevelUp(int level) {
+        if (level <= 15) {
+            return 2 * level + 7;
+        } else if (level <= 30) {
+            return 5 * level - 38;
+        } else {
+            return 9 * level - 158;
+        }
+    }
+    // atDeprecated end
 }
diff --git a/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 5de769e7bd56bb3355c3c711d46ce5e103ea4409..e823741a915f14254933aebc515f4ad72b174bbc 100644
--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -630,6 +630,11 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public static boolean addItem(Container container, ItemEntity item) {
+        // atDeprecated start - prevent hopper pickup of death loot
+        if (item.isDeathLoot && fun.mntale.atdeprecated.config.AtCoreConfig.DEATH_LOOT_CONFIG.deathItemsHopperCantPickup) {
+            return false;
+        }
+        // atDeprecated end
         boolean flag = false;
         // CraftBukkit start
         if (org.bukkit.event.inventory.InventoryPickupItemEvent.getHandlerList().getRegisteredListeners().length > 0) { // Paper - optimize hoppers
