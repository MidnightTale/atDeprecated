From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MidnightTale <midnighttale24@gmail.com>
Date: Sat, 19 Jul 2025 22:20:58 +0700
Subject: [PATCH] Dispenser place boat on ice, packed ice, blue ice


As part of: MidnightPatch (https://github.com/MidnightTale/MidnightPatch/blob/eda1116de584d17c9d5b79b5151ff18a533595d5/src/main/java/fun/mntale/midnightPatch/module/entity/boat/DispenserBoatListener.java)

diff --git a/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java b/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
index 702ca443a746d733ef14e927b7377aa3d31ae61d..5f2394111e537d25da6a53d43cad23f1aecc17d2 100644
--- a/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
+++ b/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
@@ -30,22 +30,78 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
         double d3 = vec3.z() + direction.getStepZ() * d;
         BlockPos blockPos = blockSource.pos().relative(direction);
         double d4;
+        // atDeprecated start - Allow dispenser to place boats on ice (including UP)
+        boolean foundIce = false;
+        BlockPos iceBlockPos = null;
+        Vec3 spawnLoc = null;
         if (serverLevel.getFluidState(blockPos).is(FluidTags.WATER)) {
             d4 = 1.0;
+            spawnLoc = new Vec3(d1, d2 + d4, d3);
+        } else if (direction == Direction.UP) {
+            // Vertical UP logic: look up to 2 air blocks, then for ice-type
+            BlockPos current = blockPos;
+            int airCount = 0;
+            int maxAir = 2;
+            for (int i = 0; i < 4; i++) {
+                if (airCount < maxAir && serverLevel.isEmptyBlock(current)) {
+                    airCount++;
+                    current = current.above();
+                    continue;
+                }
+                if (isIceType(serverLevel, current)) {
+                    // atDeprecated start - Only spawn if block above ice is air
+                    BlockPos aboveIce = current.above();
+                    if (serverLevel.isEmptyBlock(aboveIce)) {
+                        foundIce = true;
+                        iceBlockPos = current;
+                        spawnLoc = Vec3.atCenterOf(iceBlockPos).add(0, 1.1, 0); // 1.1 to spawn above ice
+                    }
+                    // atDeprecated end
+                    break;
+                }
+                break;
+            }
+            if (!foundIce) {
+                // Fallback to vanilla: air in front, water below
+                if (!serverLevel.getBlockState(blockPos).isAir() || !serverLevel.getFluidState(blockPos.below()).is(FluidTags.WATER)) {
+                    return this.defaultDispenseItemBehavior.dispense(blockSource, item);
+                }
+                d4 = 0.0;
+                spawnLoc = new Vec3(d1, d2 + d4, d3);
+            }
         } else {
-            if (!serverLevel.getBlockState(blockPos).isAir() || !serverLevel.getFluidState(blockPos.below()).is(FluidTags.WATER)) {
-                return this.defaultDispenseItemBehavior.dispense(blockSource, item);
+            // Horizontal and DOWN logic (existing)
+            BlockPos current = blockPos;
+            for (int i = 0; i < 2; i++) {
+                if (serverLevel.isEmptyBlock(current)) {
+                    BlockPos below = current.below();
+                    if (isIceType(serverLevel, below)) {
+                        foundIce = true;
+                        iceBlockPos = below;
+                        spawnLoc = Vec3.atCenterOf(iceBlockPos).add(0, 0.6, 0); // 0.6 to spawn above ice
+                        break;
+                    }
+                    current = current.relative(direction);
+                } else {
+                    break;
+                }
+            }
+            if (!foundIce) {
+                // Fallback to vanilla: air in front, water below
+                if (!serverLevel.getBlockState(blockPos).isAir() || !serverLevel.getFluidState(blockPos.below()).is(FluidTags.WATER)) {
+                    return this.defaultDispenseItemBehavior.dispense(blockSource, item);
+                }
+                d4 = 0.0;
+                spawnLoc = new Vec3(d1, d2 + d4, d3);
             }
-
-            d4 = 0.0;
         }
-
+        // atDeprecated end
         // CraftBukkit start
         ItemStack singleItemStack = item.copyWithCount(1);
         org.bukkit.block.Block block = org.bukkit.craftbukkit.block.CraftBlock.at(serverLevel, blockSource.pos());
         org.bukkit.craftbukkit.inventory.CraftItemStack craftItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(singleItemStack);
 
-        org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(d1, d2 + d4, d3));
+        org.bukkit.event.block.BlockDispenseEvent event = new org.bukkit.event.block.BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(spawnLoc.x, spawnLoc.y, spawnLoc.z));
         serverLevel.getCraftServer().getPluginManager().callEvent(event);
 
         if (event.isCancelled()) {
@@ -66,7 +122,9 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
         // CraftBukkit end
         AbstractBoat abstractBoat = this.type.create(serverLevel, EntitySpawnReason.DISPENSER);
         if (abstractBoat != null) {
-            abstractBoat.setInitialPos(event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ()); // CraftBukkit
+            // atDeprecated start - Set spawn position and yaw for ice or water
+            abstractBoat.setInitialPos(spawnLoc.x, spawnLoc.y, spawnLoc.z);
+            // atDeprecated end
             EntityType.<AbstractBoat>createDefaultStackConfig(serverLevel, item, null).accept(abstractBoat);
             abstractBoat.setYRot(direction.toYRot());
             if (serverLevel.addFreshEntity(abstractBoat) && shrink) item.shrink(1); // Paper - if entity add was successful and supposed to shrink
@@ -75,6 +133,14 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
         return item;
     }
 
+    // atDeprecated - Helper to check for ice blocks
+    private static boolean isIceType(ServerLevel level, BlockPos pos) {
+        var block = level.getBlockState(pos).getBlock();
+        return block == net.minecraft.world.level.block.Blocks.ICE ||
+               block == net.minecraft.world.level.block.Blocks.PACKED_ICE ||
+               block == net.minecraft.world.level.block.Blocks.BLUE_ICE;
+    }
+
     @Override
     protected void playSound(BlockSource blockSource) {
         blockSource.level().levelEvent(1000, blockSource.pos(), 0);
